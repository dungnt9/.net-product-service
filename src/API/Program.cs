using Microsoft.EntityFrameworkCore;
using Application;
using Infrastructure;
using Infrastructure.Persistence;
using System.Diagnostics;  // h·ªó tr·ª£ c√°c t√°c v·ª• g·ª° l·ªói (debugging)

// object builder ƒë·ªÉ c·∫•u h√¨nh v√† x√¢y d·ª±ng ·ª©ng d·ª•ng Web b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c tham s·ªë d√≤ng l·ªánh (args)
var builder = WebApplication.CreateBuilder(args);

if (builder.Environment.IsDevelopment())
{
    try
    {
        Console.WriteLine("üöÄ Starting MySQL...");
        Process.Start(new ProcessStartInfo("docker-compose", "up -d") { UseShellExecute = false });
        await Task.Delay(8000); // Wait 8 seconds
        Console.WriteLine("‚úÖ MySQL started!");
    }
    catch { Console.WriteLine("‚ö†Ô∏è Run 'docker-compose up -d' manually"); }
}

// Add services to the container.
builder.Services.AddControllers();  // ƒêƒÉng k√Ω service MVC Controller v√†o dependency injection container ƒë·ªÉ s·ª≠ d·ª•ng
builder.Services.AddEndpointsApiExplorer(); // K√≠ch ho·∫°t API endpoints ƒë·ªÉ ·ª©ng d·ª•ng c√≥ th·ªÉ kh√°m ph√°/hi·ªÉn th·ªã t√†i li·ªáu API
builder.Services.AddSwaggerGen();  // K√≠ch ho·∫°t Swagger ƒë·ªÉ t·∫°o giao di·ªán t√†i li·ªáu

// Application & Infrastructure services
// ƒêƒÉng k√Ω service trong t·∫ßng Application v√† Infrastructure v·ªõi dependency injection container
builder.Services.AddApplicationServices();
builder.Services.AddInfrastructureServices(builder.Configuration);

// CORS for development
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", builder =>
    {
        builder.AllowAnyOrigin()
            .AllowAnyMethod()
            .AllowAnyHeader();
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment() || app.Environment.EnvironmentName == "Dev")
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseCors("AllowAll");
app.UseAuthorization();  // middleware x·ª≠ l√Ω x√°c th·ª±c v√† ph√¢n quy·ªÅn
app.MapControllers(); // Map (ƒë·ªãnh tuy·∫øn) c√°c controller ƒë·ªÉ ·ª©ng d·ª•ng c√≥ th·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu HTTP

// Auto migrate database
// T·∫°o scope cho service ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu v·ªõi c∆° ch·∫ø Dependency Injection
using (var scope = app.Services.CreateScope())
{
    // L·∫•y ƒë·ªëi t∆∞·ª£ng ApplicationDbContext th√¥ng qua DI container
    var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    await context.Database.EnsureDeletedAsync();
    await context.Database.EnsureCreatedAsync();
    
    // Ki·ªÉm tra n·∫øu ch∆∞a c√≥ b·∫£n ghi n√†o trong b·∫£ng Products
    if (!context.Products.Any())
    {
        //ƒê·ªçc file data.sql t·ª´ ƒë∆∞·ªùng d·∫´n ƒë·ªãnh s·∫µn
        var sqlFile = Path.Combine(Directory.GetCurrentDirectory(), "..", "..", "data.sql");
        if (File.Exists(sqlFile))
        {
            var sql = await File.ReadAllTextAsync(sqlFile);
            await context.Database.ExecuteSqlRawAsync(sql);
            Console.WriteLine("‚úÖ Data loaded from data.sql!");
        }
    }
}

app.Run();